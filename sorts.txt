
#include <iostream>
using namespace std;
const int n = 155;

// Функция для вывода массива
void printArray(int arr[], int size)
{
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Функция для обмена двух элементов
void swap(int* a, int* b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Алгоритм сортировки выбором
void selectionSort(int arr[], int n, int& comp, int& swaps)
{
    for (int i = 0; i < n - 1; i++)
    {
        int min_idx = i;
        for (int j = i + 1; j < n; j++)
        {
            if (arr[j] < arr[min_idx])
            {
                min_idx = j;
            }
            comp++;
        }
        swap(&arr[min_idx], &arr[i]);
        swaps++;
    }
}

// Алгоритм сортировки обменом, Пузырька
void bubbleSort(int arr[], int n, int& comp, int& swaps)
{
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                swap(&arr[j], &arr[j + 1]);
                swaps++;
            }
            comp++;
        }
    }
}

// Алгоритм сортировки вставкой
void insertionSort(int arr[], int n, int& comp, int& swaps)
{
    for (int i = 1; i < n; i++)
    {
        int key = arr[i];
        int j = i - 1;

        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            j--;
            swaps++;
            comp++;
        }
        arr[j + 1] = key;
        swaps++;
    }
}

// Алгоритм бинарной вставки
void binaryInsertionSort(int arr[], int n, int& comp, int& swaps)
{
    for (int i = 1; i < n; i++)
    {
        int key = arr[i];
        int j = i - 1;

        int left = 0, right = j;

        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (arr[mid] > key)
            {
                right = mid - 1;
            }
            else
            {
                left = mid + 1;
            }
            comp++;
        }

        for (int k = i - 1; k >= left; k--)
        {
            arr[k + 1] = arr[k];
            swaps++;
        }

        arr[left] = key;
        swaps++;
    }
}

// Алгоритм шейкерной сортировки
void shakerSort(int arr[], int n, int& comp, int& swaps)
{
    bool swapped = true;
    int start = 0;
    int end = n - 1;

    while (swapped)
    {
        swapped = false;

        for (int i = start; i < end; ++i)
        {
            if (arr[i] > arr[i + 1])
            {
                swap(&arr[i], &arr[i + 1]);
                swapped = true;
                swaps++;
            }
            comp++;
        }

        if (!swapped)
            break;

        swapped = false;
        end--;

        for (int i = end - 1; i >= start; --i)
        {
            if (arr[i] > arr[i + 1])
            {
                swap(&arr[i], &arr[i + 1]);
                swapped = true;
                swaps++;
            }
            comp++;
        }
        start++;
    }
}

// Алгоритм сортировки Шелла
void shellSort(int arr[], int n, int& comp, int& swaps)
{
    for (int gap = n / 2; gap > 0; gap /= 2)
    {
        for (int i = gap; i < n; i += 1)
        {
            int temp = arr[i];
            int j;
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap)
            {
                arr[j] = arr[j - gap];
                swaps++;
                comp++;
            }
            arr[j] = temp;
            swaps++;
        }
    }
}

// Функция для разбиения массива для быстрой сортировки
int partition(int arr[], int low, int high, int& comp, int& swaps)
{
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++)
    {
        if (arr[j] <= pivot)
        {
            i++;
            swap(&arr[i], &arr[j]);
            swaps++;
        }
        comp++;
    }
    swap(&arr[i + 1], &arr[high]);
    swaps++;
    return (i + 1);
}

// Алгоритм быстрой сортировки
void qs(int arr[], int low, int high, int& comp, int& swaps)
{
    if (low < high)
    {
        int pi = partition(arr, low, high, comp, swaps);

        qs(arr, low, pi - 1, comp, swaps);
        qs(arr, pi + 1, high, comp, swaps);
    }
}
void QuickSort(int a[])
{
    int b[n], comps = 0, swaps = 0;

    for (int i = 0; i < n; i++)
        b[i] = a[i];
    qs(b, 0, n - 1, comps, swaps);

}

// Функция для построения кучи
void heapify(int arr[], int n, int i, int& comp, int& swaps)
{
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    if (l < n && arr[l] > arr[largest])
    {
        largest = l;
        comp++;
    }

    if (r < n && arr[r] > arr[largest])
    {
        largest = r;
        comp++;
    }

    if (largest != i)
    {
        swap(&arr[i], &arr[largest]);
        swaps++;

        heapify(arr, n, largest, comp, swaps);
    }
}

// Алгоритм сортировки кучей
void heapSort(int arr[], int n, int& comp, int& swaps)
{
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i, comp, swaps);

    for (int i = n - 1; i >= 0; i--)
    {
        swap(&arr[0], &arr[i]);
        swaps++;

        heapify(arr, i, 0, comp, swaps);
    }
}

int main()
{
    setlocale(LC_ALL, "RUS");

    int arr[n];
    for (int i = 0; i < n; i++)
    {
        arr[i] = rand() % 100; // Заполняем массив случайными числами от 0 до 99
    }

    int comp = 0;
    int swaps = 0;



    // Простым выбором
    selectionSort(arr, n, comp, swaps);
    cout << "Простого выбора: " <<  endl;
    cout << "Сравнений: " << comp << endl;
    cout << "Перестановок: " << swaps << endl;
    cout << endl;


    // Метод пузырька
    bubbleSort(arr, n, comp, swaps);
    cout << "Методом пузырька: " <<  endl;
    cout << "Сравнений: " << comp << endl;
    cout << "Перестановок:" << swaps << endl;
    cout << endl;

    // Простой вставки
    insertionSort(arr, n, comp, swaps);
    cout << "Методом Простой вставки: " <<  endl;
    cout << "Сравнений:" << comp << endl;
    cout << "Перестановок:" << swaps << endl;
    cout << endl;

    // Бинарной вставкой
    binaryInsertionSort(arr, n, comp, swaps);
    cout << "Методом Бинарной вставки: " << endl;
    cout << "Сравнений:" << comp << endl;
    cout << "Перестановок:" << swaps << endl;
    cout << endl;

    // Шейкер
    shakerSort(arr, n, comp, swaps);
    cout << "Методом Шейкера: " <<  endl;
    cout << "Сравнений:" << comp << endl;
    cout << "Перестановок:" << swaps << endl;
    cout << endl;

    // Метод Шелла
    shellSort(arr, n, comp, swaps);
    cout << "Методом Шелла: " <<  endl;
    cout << "Сравнений:" << comp << endl;
    cout << "Перестановок:" << swaps << endl;


    heapSort(arr, n, comp, swaps);
    cout << "heapSort" <<  endl;
    cout << "Сравнений:" << comp << endl;
    cout << "Перестановок:" << swaps << endl;

    QuickSort(arr);
    cout << "heapSort" << endl;
    cout << "Сравнений:" << comp << endl;
    cout << "Перестановок:" << swaps << endl;
}